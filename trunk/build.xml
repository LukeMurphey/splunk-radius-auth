<project default="package" name="splunk_radius_auth">

    <!--
    Load the properties files, local is loaded first since properties are immutable (cannot be changed
    by later property files) and we want the local properties to override the default properties
    -->
    <property file="local.properties" />
    <property file="default.properties" />
	
	<!-- Set up some basic parameters -->
	<property name="value.src.directory" value="src" />
	<property name="value.temp.directory" value="${java.io.tmpdir}/${user.name}/${ant.project.name}" />
	<property name="value.build.appname" value="radius_auth" />
	
    <!-- ================================= 
          target: clean
         ================================= -->
    <target name="clean" description="Clean up temporary files and directories created by this build script" >
        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${value.temp.directory}" />
        </delete>
    </target>
	
    <!-- ================================= 
          target: update_from_svn
         ================================= -->
    <target name="update_from_svn">
        <taskdef name="svn" classpath="ant/svnant.jar;ant/svnClientAdapter.jar;ant/svnjavahl.jar;ant/svnkit.jar" classname="org.tigris.subversion.svnant.SvnTask" />
        <svn>
            <update dir="${value.build.workingcopy.directory}" revision="HEAD" />
        </svn>
    </target>
	
    <!-- ================================= 
          target: get_build_number
         ================================= -->
    <target name="get_build_number">
    	<taskdef name="svn" classpath="ant/svnant.jar;ant/svnClientAdapter.jar;ant/svnjavahl.jar;ant/svnkit.jar" classname="org.tigris.subversion.svnant.SvnTask" />

        <svn>
            <info target="${value.build.workingcopy.directory}" />
            <wcVersion prefix="svn." path="${value.build.workingcopy.directory}" />
        </svn>
    </target>
	
    <!-- ================================= 
          target: clean_packages
         ================================= -->
    <target name="clean_packages" description="Clean up the packages created by this build script" >
        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="tmp/packages" />
        </delete>
    </target>
	
    <!-- ================================= 
          target: setup_tmp_directory_for_export
         ================================= -->
	<target name="setup_tmp_directory_for_export">
		
		<!-- Create a temporary directory to send the files to -->
	    <property name="export_dir" value="${value.temp.directory}/package" />
		
		<!-- Create the temporary directory -->
		<mkdir dir="${export_dir}"/>
		
	</target>
	
    <!-- ================================= 
          target: populate_export_dir
         ================================= -->
    <target name="populate_export_dir">
    	
    	<!-- Copy the files over -->
    	<copy todir="${export_dir}">
    	    <fileset dir="${value.src.directory}"/>
    	</copy>

    	
    </target>
    	
    <!-- ================================= 
          target: package
         ================================= -->
    <target name="package" depends="setup_tmp_directory_for_export,populate_export_dir" description="Create the Splunk package of the app">
    	
    	<!-- Make the directory where we will store the files -->
    	<mkdir dir="${value.build.packageoutput.directory}" />
    	
    	<!-- Define where the tar file will go -->
    	<property name="value.temp.tar_package.file" value="${value.temp.directory}/${value.build.appname}.tar" />
    	
        <!-- Tar the files -->
        <tar destfile="${value.temp.tar_package.file}"
             basedir="${export_dir}"
             excludes=" **/*.tmp, **/*.pyc"
        />
        
        <!-- Gzip the files -->
        <gzip src="${value.temp.tar_package.file}" destfile="${value.build.packageoutput.directory}/${value.build.appname}.tar.gz"/>

    </target>
	
    <!-- ================================= 
          target: setup_tmp_directory_for_deployment
         ================================= -->
    <target name="setup_tmp_directory_for_deployment">
        
        <!-- Create a reference to the directory to send the files to -->
        <property name="export_dir" value="${value.deploy.splunk_home}/etc/apps/${value.build.appname}" />
    	
    	<!-- Make the app directory if it does not yet exist -->
    	<mkdir dir="${export_dir}" />
        
    </target>
	
    <!-- ================================= 
          target: deploy
         ================================= -->
    <target name="deploy" depends="setup_tmp_directory_for_deployment,populate_export_dir" description="Deploys the app to an instance of Splunk" >
        <echo>App deployed to ${export_dir}</echo>
    </target>
	
    <!-- ================================= 
          target: stop_splunk
         ================================= -->
    <target name="stop_splunk">
        <exec executable="${value.deploy.splunk_home}/bin/splunk">
            <arg line="stop" />
            <arg line="--accept-license" />
        </exec>
    </target>
	
    <!-- ================================= 
          target: start_splunk
         ================================= -->
    <target name="start_splunk">
        <exec executable="${value.deploy.splunk_home}/bin/splunk">
            <arg line="start" />
            <arg line="--accept-license" />
        </exec>
    </target>
	
    <!-- ================================= 
          target: restart_splunk
         ================================= -->
    <target name="restart_splunk">
        <exec executable="${value.deploy.splunk_home}/bin/splunk">
            <arg line="restart" />
            <arg line="--accept-license" />
        </exec>
    </target>
	
    <!-- ================================= 
          target: restart_splunk_web
         ================================= -->
    <target name="restart_splunk_web">
        <exec executable="${value.deploy.splunk_home}/bin/splunk">
            <arg line="restart" />
        	<arg line="splunkweb" />
            <arg line="--accept-license" />
        </exec>
    </target>
	
</project>
